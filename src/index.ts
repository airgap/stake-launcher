import puppeteer, { Browser, Cookie } from "puppeteer";

import { app, BrowserWindow, ipcMain } from "electron";
import { Settings } from "./settingsModel";
import { loadSettings, serverSettingsStore } from "./serverSettingsStore";
import { writeFile } from "fs/promises";
// This allows TypeScript to pick up the magic constants that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
declare const MAIN_WINDOW_WEBPACK_ENTRY: string;
declare const MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY: string;

// Handle creating/removing shortcuts on Windows when installing/uninstalling.
if (require("electron-squirrel-startup")) {
  app.quit();
}
let mainWindow: BrowserWindow;
const createWindow = (): void => {
  // Create the browser window.
  mainWindow = new BrowserWindow({
    height: 500,
    width: 500,
    webPreferences: {
      preload: MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY,
      // nodeIntegration: true,
      // contextIsolation: false
    },
    autoHideMenuBar: true,
  });

  // and load the index.html of the app.
  mainWindow.loadURL(MAIN_WINDOW_WEBPACK_ENTRY);

  // mainWindow.on("ready-to-show", launchPuppeteer);

  // Open the DevTools.
  // mainWindow.webContents.openDevTools();
};

// This method will be called when Electron has finished
// initialization and is ready to create browser windows.
// Some APIs can only be used after this event occurs.
app.on("ready", createWindow);

// Quit when all windows are closed, except on macOS. There, it's common
// for applications and their menu bar to stay active until the user quits
// explicitly with Cmd + Q.
app.on("window-all-closed", () => {
  if (process.platform !== "darwin") {
    app.quit();
  }
});

app.on("activate", () => {
  // On OS X it's common to re-create a window in the app when the
  // dock icon is clicked and there are no other windows open.
  if (BrowserWindow.getAllWindows().length === 0) {
    createWindow();
  }
});

const newPageWithUrl = async (url: string) => {
  await loadSettings(mainWindow);
  const browser = await puppeteer.launch({
    headless: serverSettingsStore.headless,
    devtools: false,
    args: ["--no-sandbox", "--disable-setuid-sandbox"],
  });
  const page = await browser.newPage();
  page.setCookie(...cookies);
  page.setRequestInterception(true);
  page.on("request", (request) => {
    if (request.url().includes("jivosite.com")) {
      request.abort();
      return;
    }
    request.continue();
  });
  page.setViewport({
    width: 1920,
    height: 1080,
  });
  await page.goto(url);
  return page;
};
let cookies: Cookie[];
const signIn = async () => {
  const page = await newPageWithUrl("https://www.stakingfarm.com/signin");
  console.log("page started");
  const emailSelector = "input[name=email]";
  const passwordSelector = "input[name=password]";
  await page.waitForSelector(emailSelector);
  const { farmEmail, farmPassword } = serverSettingsStore ?? {};
  if (farmEmail) await page.locator(emailSelector).fill(farmEmail);
  if (farmPassword) await page.locator(passwordSelector).fill(farmPassword);
  if (farmEmail && farmPassword) await page.locator("form .main_btn").click();
  await page.waitForNavigation({ timeout: 0 });
  cookies = await page.cookies();
  await page.close();
};

const scanBalance = async () => {
  const page = await newPageWithUrl("https://www.stakingfarm.com/dashboard");
  const balanceSelector =
    "body > div.dashboard-section > div.dashboard-part > div:nth-child(2) > div:nth-child(1) > div > div > div > div:nth-child(1) > h1.grd-text.mt-4.mb-0";
  await page.waitForSelector(balanceSelector);
  const balanceNode = await page.$(balanceSelector);
  const balanceText = await page.evaluate((e) => e.innerText, balanceNode);
  const balance = parseFloat(balanceText.substring(2));
  console.log("balance", balance);
  mainWindow.webContents.send("balance-update", balance);
  await page.close();
};
ipcMain.handle("settings-changed", (e, settings: Settings) =>
  writeFile("./settings.json", JSON.stringify(settings, null, 4)),
);
